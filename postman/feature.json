{
  "info": {
    "_postman_id": "5a4bfc7a-d019-4926-9be2-c9328f1bda52",
    "name": "Test Explore With Me - Feature",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
    "_exporter_id": "16372223"
  },
  "item": [
    {
      "name": "Comments",
      "item": [
        {
          "name": "Добавление инициатора события",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('name');\r",
                  "pm.expect(target).to.have.property('email');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect('Rhonda Kuhic').equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
                  "    pm.expect('Telia24@yahoo.com').equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "    {\n        \"email\": \"Telia24@yahoo.com\",\n        \"name\": \"Rhonda Kuhic\"\n    }",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/admin/users"
          },
          "response": []
        },
        {
          "name": "Добавление комментатора",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('name');\r",
                  "pm.expect(target).to.have.property('email');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect('Aron Gottlieb').equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
                  "    pm.expect('Erald.Renner@yahoo.com').equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"Erald.Renner@yahoo.com\",\n    \"name\": \"Aron Gottlieb\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/admin/users"
          },
          "response": []
        },
        {
          "name": "Добавление новой категории",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('name');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect('first category').equal(target.name, 'Название категории должно совпадать с отправленным');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"first category\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/admin/categories",
            "description": "Обратите внимание: имя категории должно быть уникальным"
          },
          "response": []
        },
        {
          "name": "Добавление нового события",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(201);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('title');\r",
                  "pm.expect(target).to.have.property('annotation');\r",
                  "pm.expect(target).to.have.property('category');\r",
                  "pm.expect(target).to.have.property('paid');\r",
                  "pm.expect(target).to.have.property('eventDate');\r",
                  "pm.expect(target).to.have.property('initiator');\r",
                  "pm.expect(target).to.have.property('description');\r",
                  "pm.expect(target).to.have.property('participantLimit');\r",
                  "pm.expect(target).to.have.property('state');\r",
                  "pm.expect(target).to.have.property('createdOn');\r",
                  "pm.expect(target).to.have.property('location');\r",
                  "pm.expect(target).to.have.property('requestModeration');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.title).equal('Asperiores praesentium doloremque ut magnam consequatur tempore dolor.', 'Название события должно соответствовать названию события в запросе');\r",
                  "    pm.expect(target.annotation).equal('A nobis delectus veritatis. Voluptatem ut quaerat quia. Dolore dolorem vel quia veritatis aut.', 'Аннотация события должна соответствовать аннотации события в запросе');\r",
                  "    pm.expect(target.paid.toString()).equal('false', 'Стоимость события должна соответствовать стоимости события в запросе');\r",
                  "    pm.expect(target.eventDate).equal('2024-12-15 02:00:52', 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
                  "    pm.expect(target.description).equal('Qui et sequi tenetur possimus odit consectetur. Cupiditate commodi laboriosam. Porro cum quia non ut nam enim eum eos. Consequatur dicta temporibus et ad reprehenderit beatae a.\\n \\rQui et exercitationem ab hic ratione ea et neque id. Vel amet rerum soluta. Consectetur ut beatae vero consequatur quas maiores blanditiis molestias totam. Amet dolore exercitationem qui nam quisquam quo repudiandae et. Et consectetur commodi doloremque neque nam sed reprehenderit.\\n \\rQuasi quasi omnis perferendis. Accusantium ipsam iusto illum facilis ut corrupti aut libero. Sunt natus consequatur non consequatur enim. Nemo qui consectetur laborum molestiae ratione pariatur cum. Odio suscipit maiores nisi temporibus earum temporibus quidem quo veritatis. Laborum debitis eos assumenda id neque fugit voluptate fuga ipsa.', 'Описание события должно соответствовать описание события в запросе');\r",
                  "    pm.expect(target.participantLimit.toString()).equal('635', 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
                  "    pm.expect(target.location.lat.toString()).equal('-79.4466', 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
                  "    pm.expect(target.location.lon.toString()).equal('176.5634', 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
                  "    pm.expect(target.requestModeration.toString()).equal('true', 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"annotation\": \"A nobis delectus veritatis. Voluptatem ut quaerat quia. Dolore dolorem vel quia veritatis aut.\",\n    \"category\": 121,\n    \"description\": \"Qui et sequi tenetur possimus odit consectetur. Cupiditate commodi laboriosam. Porro cum quia non ut nam enim eum eos. Consequatur dicta temporibus et ad reprehenderit beatae a.\\n \\rQui et exercitationem ab hic ratione ea et neque id. Vel amet rerum soluta. Consectetur ut beatae vero consequatur quas maiores blanditiis molestias totam. Amet dolore exercitationem qui nam quisquam quo repudiandae et. Et consectetur commodi doloremque neque nam sed reprehenderit.\\n \\rQuasi quasi omnis perferendis. Accusantium ipsam iusto illum facilis ut corrupti aut libero. Sunt natus consequatur non consequatur enim. Nemo qui consectetur laborum molestiae ratione pariatur cum. Odio suscipit maiores nisi temporibus earum temporibus quidem quo veritatis. Laborum debitis eos assumenda id neque fugit voluptate fuga ipsa.\",\n    \"eventDate\": \"2024-12-15 02:00:52\",\n    \"location\": {\n        \"lat\": -79.4466,\n        \"lon\": 176.5634\n    },\n    \"paid\": false,\n    \"participantLimit\": 635,\n    \"requestModeration\": true,\n    \"title\": \"Asperiores praesentium doloremque ut magnam consequatur tempore dolor.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "136",
                  "description": "(Required) id текущего пользователя"
                }
              ]
            },
            "description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
          },
          "response": []
        },
        {
          "name": "Редактирование данных события и его статуса (отклонение/публикация).",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"annotation\": \"A nobis delectus veritatis. Voluptatem ut quaerat quia. Dolore dolorem vel quia veritatis aut.\",\n    \"category\": 1,\n    \"description\": \"Qui et sequi tenetur possimus odit consectetur. Cupiditate commodi laboriosam. Porro cum quia non ut nam enim eum eos. Consequatur dicta temporibus et ad reprehenderit beatae a.\\n \\rQui et exercitationem ab hic ratione ea et neque id. Vel amet rerum soluta. Consectetur ut beatae vero consequatur quas maiores blanditiis molestias totam. Amet dolore exercitationem qui nam quisquam quo repudiandae et. Et consectetur commodi doloremque neque nam sed reprehenderit.\\n \\rQuasi quasi omnis perferendis. Accusantium ipsam iusto illum facilis ut corrupti aut libero. Sunt natus consequatur non consequatur enim. Nemo qui consectetur laborum molestiae ratione pariatur cum. Odio suscipit maiores nisi temporibus earum temporibus quidem quo veritatis. Laborum debitis eos assumenda id neque fugit voluptate fuga ipsa.\",\n    \"eventDate\": \"2024-12-15 02:00:52\",\n    \"location\": {\n        \"lat\": -79.4466,\n        \"lon\": 176.5634\n    },\n    \"paid\": false,\n    \"participantLimit\": 635,\n    \"requestModeration\": true,\n    \"stateAction\": \"PUBLISH_EVENT\",\n    \"title\": \"Asperiores praesentium doloremque ut magnam consequatur tempore dolor.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "1",
                  "description": "(Required) id события"
                }
              ]
            },
            "description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
          },
          "response": []
        },
        {
          "name": "Создание комментария",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(201);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, text, created, category, state, event\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('text');\r",
                  "pm.expect(target).to.have.property('created');\r",
                  "pm.expect(target).to.have.property('state');\r",
                  "pm.expect(target).to.have.property('event');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.text).equal(\"Sed delectus voluptates non quam quibusdam blanditiis ut rerum minus. Sed temporibus deleniti quibusdam fugiat cupiditate ea. Fugiat voluptatem perspiciatis commodi non laudantium impedit quisquam animi aliquid. Dolore commodi rerum aliquam. Molestias eaque ullam commodi qui.\", 'Название события должно соответствовать названию события в запросе');\r",
                  "    pm.expect(target.created).to.not.be.null;\r",
                  "    pm.expect(target.state).equal(\"PUBLISHED\", 'State должен быть PUBLISHED');\r",
                  "    pm.expect(target.event.id).to.not.be.null;\r",
                  "    pm.expect(target.event.title).equal('Asperiores praesentium doloremque ut magnam consequatur tempore dolor.', 'Название события должно соответствовать названию события в запросе');\r",
                  "    pm.expect(target.event.annotation).equal('A nobis delectus veritatis. Voluptatem ut quaerat quia. Dolore dolorem vel quia veritatis aut.', 'Аннотация события должна соответствовать аннотации события в запросе');\r",
                  "    pm.expect(target.event.paid.toString()).equal('false', 'Стоимость события должна соответствовать стоимости события в запросе');\r",
                  "    pm.expect(target.event.eventDate).equal('2024-12-15 02:00:52', 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
                  "    pm.expect(target.event.initiator.id).to.not.be.null;\r",
                  "    pm.expect(target.event.initiator.name).equal('Rhonda Kuhic', 'Инициатор проведения события должна соответствовать инициатору проведения события в запросе');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"text\": \"Sed delectus voluptates non quam quibusdam blanditiis ut rerum minus. Sed temporibus deleniti quibusdam fugiat cupiditate ea. Fugiat voluptatem perspiciatis commodi non laudantium impedit quisquam animi aliquid. Dolore commodi rerum aliquam. Molestias eaque ullam commodi qui.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments?eventId=1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "1"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "2"
                }
              ]
            },
            "description": "Обратите внимание:\n- событие должно быть опубликовано\n- информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
          },
          "response": []
        },
        {
          "name": "Получение комментария",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(200);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, text, created, category, state, event\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('text');\r",
                  "pm.expect(target).to.have.property('created');\r",
                  "pm.expect(target).to.have.property('state');\r",
                  "pm.expect(target).to.have.property('event');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.text).equal(\"Sed delectus voluptates non quam quibusdam blanditiis ut rerum minus. Sed temporibus deleniti quibusdam fugiat cupiditate ea. Fugiat voluptatem perspiciatis commodi non laudantium impedit quisquam animi aliquid. Dolore commodi rerum aliquam. Molestias eaque ullam commodi qui.\", 'Название события должно соответствовать названию события в запросе');\r",
                  "    pm.expect(target.created).to.not.be.null;\r",
                  "    pm.expect(target.state).equal(\"PUBLISHED\", 'State должен быть PUBLISHED');\r",
                  "    pm.expect(target.event.id).to.not.be.null;\r",
                  "    pm.expect(target.event.title).equal('Asperiores praesentium doloremque ut magnam consequatur tempore dolor.', 'Название события должно соответствовать названию события в запросе');\r",
                  "    pm.expect(target.event.annotation).equal('A nobis delectus veritatis. Voluptatem ut quaerat quia. Dolore dolorem vel quia veritatis aut.', 'Аннотация события должна соответствовать аннотации события в запросе');\r",
                  "    pm.expect(target.event.paid.toString()).equal('false', 'Стоимость события должна соответствовать стоимости события в запросе');\r",
                  "    pm.expect(target.event.eventDate).equal('2024-12-15 02:00:52', 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
                  "    pm.expect(target.event.initiator.id).to.not.be.null;\r",
                  "    pm.expect(target.event.initiator.name).equal('Rhonda Kuhic', 'Инициатор проведения события должна соответствовать инициатору проведения события в запросе');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "2"
                },
                {
                  "key": "commentId",
                  "value": "1"
                }
              ]
            },
            "description": "Обратите внимание:\n- событие должно быть опубликовано\n- информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
          },
          "response": []
        },
        {
          "name": "Получение подробной информации о событии",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = pm.collectionVariables.get('response');\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('title');\r",
                  "pm.expect(target).to.have.property('annotation');\r",
                  "pm.expect(target).to.have.property('category');\r",
                  "pm.expect(target).to.have.property('paid');\r",
                  "pm.expect(target).to.have.property('eventDate');\r",
                  "pm.expect(target).to.have.property('initiator');\r",
                  "pm.expect(target).to.have.property('views');\r",
                  "pm.expect(target).to.have.property('confirmedRequests');\r",
                  "pm.expect(target).to.have.property('description');\r",
                  "pm.expect(target).to.have.property('participantLimit');\r",
                  "pm.expect(target).to.have.property('state');\r",
                  "pm.expect(target).to.have.property('createdOn');\r",
                  "pm.expect(target).to.have.property('publishedOn');\r",
                  "pm.expect(target).to.have.property('location');\r",
                  "pm.expect(target).to.have.property('requestModeration');\r",
                  "pm.expect(target).to.have.property('comments');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.title).equal('Asperiores praesentium doloremque ut magnam consequatur tempore dolor.', 'Название события должно соответствовать названию события в запросе');\r",
                  "    pm.expect(target.annotation).equal('A nobis delectus veritatis. Voluptatem ut quaerat quia. Dolore dolorem vel quia veritatis aut.', 'Аннотация события должна соответствовать аннотации события в запросе');\r",
                  "    pm.expect(target.paid.toString()).equal('false', 'Стоимость события должна соответствовать стоимости события в запросе');\r",
                  "    pm.expect(target.eventDate).equal('2024-12-15 02:00:52', 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
                  "    pm.expect(target.description).equal('Qui et sequi tenetur possimus odit consectetur. Cupiditate commodi laboriosam. Porro cum quia non ut nam enim eum eos. Consequatur dicta temporibus et ad reprehenderit beatae a.\\n \\rQui et exercitationem ab hic ratione ea et neque id. Vel amet rerum soluta. Consectetur ut beatae vero consequatur quas maiores blanditiis molestias totam. Amet dolore exercitationem qui nam quisquam quo repudiandae et. Et consectetur commodi doloremque neque nam sed reprehenderit.\\n \\rQuasi quasi omnis perferendis. Accusantium ipsam iusto illum facilis ut corrupti aut libero. Sunt natus consequatur non consequatur enim. Nemo qui consectetur laborum molestiae ratione pariatur cum. Odio suscipit maiores nisi temporibus earum temporibus quidem quo veritatis. Laborum debitis eos assumenda id neque fugit voluptate fuga ipsa.', 'Описание события должно соответствовать описание события в запросе');\r",
                  "    pm.expect(target.participantLimit.toString()).equal('635', 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
                  "    pm.expect(target.location.lat.toString()).equal('-79.4466', 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
                  "    pm.expect(target.location.lon.toString()).equal('176.5634', 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
                  "    pm.expect(target.requestModeration.toString()).equal('true', 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
                  "    pm.expect(target.comments[0].id).to.not.be.null;\r",
                  "    pm.expect(target.comments[0].commenter).equal('Aron Gottlieb', 'Комментатор должен соответствовать комментатору в запросе');\r",
                  "    pm.expect(target.comments[0].text).equal('Sed delectus voluptates non quam quibusdam blanditiis ut rerum minus. Sed temporibus deleniti quibusdam fugiat cupiditate ea. Fugiat voluptatem perspiciatis commodi non laudantium impedit quisquam animi aliquid. Dolore commodi rerum aliquam. Molestias eaque ullam commodi qui.', 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
                  "    pm.expect(target.comments[0].createdOn).to.not.be.null;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/events/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) id события"
                }
              ]
            },
            "description": "Обратите внимание:\n- событие должно быть опубликовано\n- информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
          },
          "response": []
        },
        {
          "name": "Удаление комментария",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(204);  \r",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "2"
                },
                {
                  "key": "commentId",
                  "value": "1"
                }
              ]
            },
            "description": "Обратите внимание:\n- событие должно быть опубликовано\n- информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
          "    }",
          "",
          "    async findCompilation(compId, verbose=null) {",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
          "    }",
          "",
          "    async findEvent(eventId, verbose=null) {",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "",
          "                    resolve(response.json());",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getWord(length = 1) {",
          "        let result = '';",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
          "        const charactersLength = characters.length;",
          "        let counter = 0;",
          "        while (counter < length) {",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
          "            counter += 1;",
          "        }",
          "        return result;",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "name",
      "value": ""
    },
    {
      "key": "usersCount",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "request_body",
      "value": ""
    },
    {
      "key": "mail",
      "value": ""
    },
    {
      "key": "response",
      "value": ""
    },
    {
      "key": "uid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catname",
      "value": ""
    },
    {
      "key": "eid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "compid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "toCheck",
      "value": ""
    },
    {
      "key": "newDataToSet",
      "value": ""
    },
    {
      "key": "uid1",
      "value": "2"
    },
    {
      "key": "reqid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "commid",
      "value": "1",
      "type": "string"
    },
    {
      "key": "catId",
      "value": ""
    },
    {
      "key": "confirmedRequests",
      "value": ""
    },
    {
      "key": "responseArr",
      "value": ""
    },
    {
      "key": "source1",
      "value": ""
    },
    {
      "key": "source2",
      "value": ""
    },
    {
      "key": "fromId",
      "value": "0"
    },
    {
      "key": "source",
      "value": ""
    }
  ]
}